@page "/"
@using System.Security.Claims
@using Lib
@using Microsoft.AspNetCore.Components.Authorization
@using System.Diagnostics
@using XuMath
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
        <h2>Hello, @context.User.Identity.Name!</h2>
        <p>You can only see this content if you're authorized.</p>
        <button class="btn btn-primary" @onclick="SecureMethod">Authorized Only Button</button>
    </Authorized>
    <NotAuthorized>
        <h2>Authentication Failure!</h2>
        <p>You're not signed in.</p>
        <div class="jumbotron mt-3">
            <h1>Links</h1>
            <ul>
                <li>Summarize content with this app: <a target="_blank" href="https://summary.leenet.link">summary</a></li>
                <li>Generate content with this app: <a target="_blank" href="https://generate.leenet.link">generate</a></li>
                <li>Blazer Boilerplate website: <a target="_blank" href="https://blazorboilerplate.leenet.link">blazorboilerplate</a></li>
            </ul>
        </div>
        <div>Prisoner's Dilemma</div>
        <EditForm Model="@prisonersDilemma" Context="prisonersDilemmaContext"> 
          <PlayerComponent 
            @bind-p1tl="@prisonersDilemma.p1tl"
            @bind-p1tr="@prisonersDilemma.p1tr"
            @bind-p1bl="@prisonersDilemma.p1bl"
            @bind-p1br="@prisonersDilemma.p1br"
            @bind-p2tl="@prisonersDilemma.p2tl"
            @bind-p2tr="@prisonersDilemma.p2tr"
            @bind-p2bl="@prisonersDilemma.p2bl"
            @bind-p2br="@prisonersDilemma.p2br" />
        </EditForm>
        <div>Hawk vs Dove</div>
        <EditForm Model="@hawkDove" Context="hawkDoveContext"> 
          <PlayerComponent 
            @bind-p1tl="@hawkDove.p1tl"
            @bind-p1tr="@hawkDove.p1tr"
            @bind-p1bl="@hawkDove.p1bl"
            @bind-p1br="@hawkDove.p1br"
            @bind-p2tl="@hawkDove.p2tl"
            @bind-p2tr="@hawkDove.p2tr"
            @bind-p2bl="@hawkDove.p2bl"
            @bind-p2br="@hawkDove.p2br" />
        </EditForm>
        <div>Pigs game</div>
        <EditForm Model="@pigsGame" Context="pigsGameContext"> 
          <PlayerComponent 
            @bind-p1tl="@pigsGame.p1tl"
            @bind-p1tr="@pigsGame.p1tr"
            @bind-p1bl="@pigsGame.p1bl"
            @bind-p1br="@pigsGame.p1br"
            @bind-p2tl="@pigsGame.p2tl"
            @bind-p2tr="@pigsGame.p2tr"
            @bind-p2bl="@pigsGame.p2bl"
            @bind-p2br="@pigsGame.p2br" />
        </EditForm>
        <div>Matching Pennies</div>
        <EditForm Model="@matchingPennies" Context="matchingPenniesContext"> 
          <PlayerComponent 
            @bind-p1tl="@matchingPennies.p1tl"
            @bind-p1tr="@matchingPennies.p1tr"
            @bind-p1bl="@matchingPennies.p1bl"
            @bind-p1br="@matchingPennies.p1br"
            @bind-p2tl="@matchingPennies.p2tl"
            @bind-p2tr="@matchingPennies.p2tr"
            @bind-p2bl="@matchingPennies.p2bl"
            @bind-p2br="@matchingPennies.p2br" />
        </EditForm>
    </NotAuthorized>
</AuthorizeView>

@code {
    Game prisonersDilemma = new Game(){
        p1tl = 3,
        p1tr = 0,
        p1bl = 5,
        p1br = 1,
        p2tl = 3,
        p2tr = 5,
        p2bl = 0,
        p2br = 1,
    };
    Game hawkDove = new Game(){
        p1tl = 0,
        p1tr = 1,
        p1bl = 3,
        p1br = 2,
        p2tl = 0,
        p2tr = 3,
        p2bl = 1,
        p2br = 2,
    };
    Game pigsGame = new Game(){
        p1tl = 4,
        p1tr = 2,
        p1bl = 2,
        p1br = 3,
        p2tl = 6,
        p2tr = 0,
        p2bl = -1,
        p2br = 0,
    };
    Game matchingPennies = new Game(){
        p1tl = 1,
        p1tr = -1,
        p1bl = -1,
        p1br = 1,
        p2tl = -1,
        p2tr = 1,
        p2bl = 1,
        p2br = -1,
    };
    
    private void SecureMethod()
    {

    }
}

@code {

    protected override async Task OnInitializedAsync() {

    }
}