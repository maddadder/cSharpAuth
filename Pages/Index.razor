@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using cSharpAuth.Services
@inject UserLinkService UserLinkService
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
        <h2>Hello, @context.User.Identity.Name!</h2>
        <p>You can only see this content if you're authorized.</p>
        <button class="btn btn-primary" @onclick="SecureMethod">Authorized Only Button</button>
    </Authorized>
    <NotAuthorized>
        <h2>Authentication Failure!</h2>
        <p>You're not signed in.</p>
        <div class="jumbotron mt-3">
            @if (userlinks == null)
            {
                <div>loading...</div>
            }
            else
            {
                <div class="input-group col">
                    <a href='/link/add' class="btn btn-primary" role="button">
                        <i class="fas fa-user-plus"></i>
                        Add Link
                    </a>
                </div>
                <div class="input-group col">
                    <input type="text" class="form-control" placeholder="Search links by name"
                        @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
                    @if (SearchString.Length > 0)
                    {
                        <div class="input-group-append">
                            <button class="btn btn-danger" @onclick="ResetSearch">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    }
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Links</th><td> </td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var link in userlinks)
                        {
                        <tr>
                            <td>
                                <a target="@link.Target" href="@link.Href">@link.Content</a>
                            </td>
                            <td>
                                <a href='/link/edit/@link.Pid' class="btn btn-outline-dark" role="button">
                                    Edit
                                </a>
                                <a href='/link/delete/@link.Pid' class="btn btn-outline-danger" role="button">
                                    Delete
                                </a>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    
    protected List<UserLink> userlinks = new();
    protected List<UserLink> searchUserlinks = new();

    protected override async Task OnInitializedAsync()
    {
        userlinks = (await UserLinkService.List("http")).ToList();
        searchUserlinks = userlinks;
    }
    protected string SearchString { get; set; } = string.Empty;
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userlinks = searchUserlinks
                .Where(x => x.Content.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userlinks = searchUserlinks;
        }
    }
    protected void ResetSearch()
    {
        SearchString = string.Empty;
        userlinks = searchUserlinks;
    }
    private void SecureMethod()
    {

    }
}
