@page "/"

@using Lib
@using Microsoft.AspNetCore.Components.Authorization
@using cSharpAuth.Services
@inject UserLinkService UserLinkService
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (userlinks == null)
{
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-md-12">loading...</div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-xs-6 col-md-6">
                <a href='/link/add' class="btn btn-primary" role="button">
                    <i class="fas fa-user-plus"></i>
                    Add Link
                </a>
            </div>
            <div class="col-xs-6 col-md-6">
                <input type="text" class="form-control" placeholder="Search links by name"
                    @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
            </div>
            <div class="col-xs-12 col-md-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Links</th><th>Created</th><th>Modified</th><th>&nbsp;</th><th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var link in userlinks.OrderBy(x => x.Content))
                        {
                        <tr>
                            <td>
                                <a target="@link.Target" href="@link.Href">@link.Content</a>
                                @{
                                    if(!string.IsNullOrEmpty(link.Category))
                                    {
                                        <br />
                                        <span>@link.Category</span>
                                    }
                                    if(!string.IsNullOrEmpty(link.ImgHref))
                                    {
                                        <br />
                                        <img src="@link.ImgHref" width="100%"/>
                                    }
                                    if(!string.IsNullOrEmpty(link.ImgContentBase64))
                                    {
                                        <br />
                                        <img src="@link.ImgContentBase64" width="100%"/>
                                    }
                                }
                            </td>
                            <td>@link.Created.ToString("MM/dd/yy")</td>
                            <td>@link.Modified.ToString("MM/dd/yy")</td>
                            <td>
                                <a href='/link/edit/@link.Pid' class="btn btn-outline-dark" role="button">
                                    Edit
                                </a>
                            </td>
                            <td>
                                <a href='/link/delete/@link.Pid' class="btn btn-outline-danger" role="button">
                                    Delete
                                </a>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    
    protected List<UserLinkOverride> userlinks = new();
    protected List<UserLinkOverride> searchUserlinks = new();

    protected override async Task OnInitializedAsync()
    {
        userlinks = (from row in (await UserLinkService.List("http", null, null))
                    select new UserLinkOverride()
                    {
                        __T = row.__T,
                        Category = row.Category,
                        Content = row.Content,
                        Created = row.Created,
                        Href = row.Href,
                        ImgContent = row.ImgContent,
                        ImgHref = row.ImgHref,
                        Modified = row.Modified,
                        Pid = row.Pid,
                        Target = row.Target,
                    }).ToList();
        searchUserlinks = userlinks;
    }
    protected string SearchString { get; set; } = string.Empty;
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userlinks = searchUserlinks
                .Where(x => x.Content.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userlinks = searchUserlinks;
        }
    }
    protected void ResetSearch()
    {
        SearchString = string.Empty;
        userlinks = searchUserlinks;
    }
    private void SecureMethod()
    {

    }
}
