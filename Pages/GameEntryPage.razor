@page "/gameentry"

@using Microsoft.AspNetCore.Components.Authorization
@using cSharpAuth.Services
@inject GameEntryService GameEntryService
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
        @if (gameEntries == null)
        {
            <div class="container">
                <div class="row">
                    <div class="col-xs-12 col-md-12">loading...</div>
                </div>
            </div>
        }
        else
        {
            <div class="container">
                <div class="row">
                    <div class="col-xs-6 col-md-6">
                        <a href='/gameEntry/add' class="btn btn-primary" role="button">
                            <i class="fas fa-user-plus"></i>
                            Add Game Entry
                        </a>
                    </div>
                    <div class="col-xs-6 col-md-6">
                        <input type="text" class="form-control" placeholder="Search game entry by name"
                            @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
                    </div>
                    <div class="col-xs-12 col-md-12">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th><th>Created</th><th>Modified</th><th>&nbsp;</th><th>&nbsp;</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var gameEntry in gameEntries.OrderByDescending(x => x.Modified))
                                {
                                <tr>
                                    <td>
                                        <span>Name: '@gameEntry.Name'</span><br/> 
                                        @foreach (var desc in gameEntry.Description)
                                        {
                                            <span>'@desc'</span><br/>
                                        }
                                        @if(gameEntry.Options != null)
                                        {
                                            @foreach (var gameOption in gameEntry.Options)
                                            {
                                                <span>'@gameOption.Description'</span><br/>
                                                <span>'@gameOption.Next'</span><br/>
                                            }
                                        }
                                    </td>
                                    <td>@gameEntry.Created.ToString("MM/dd/yy")</td>
                                    <td>@gameEntry.Modified.ToString("MM/dd/yy")</td>
                                    <td>
                                        <a href='/gameentry/edit/@gameEntry.Pid' class="btn btn-outline-dark" role="button">
                                            Edit
                                        </a>
                                    </td>
                                    <td>
                                        <a href='/gameentry/delete/@gameEntry.Pid' class="btn btn-outline-danger" role="button">
                                            Delete
                                        </a>
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        You are not authorized to view this page
    </NotAuthorized>
</AuthorizeView>

@code {
    
    protected List<GameEntry> gameEntries = new();
    protected List<GameEntry> searchGameEntries = new();

    protected override async Task OnInitializedAsync()
    {
        gameEntries = (await GameEntryService.List("UNUSED_STRING")).ToList();
        searchGameEntries = gameEntries;
    }
    protected string SearchString { get; set; } = string.Empty;
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            gameEntries = searchGameEntries
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            gameEntries = searchGameEntries;
        }
    }
    protected void ResetSearch()
    {
        SearchString = string.Empty;
        gameEntries = searchGameEntries;
    }
    private void SecureMethod()
    {

    }
}
