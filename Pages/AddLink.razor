@page "/link/add"
@page "/link/edit/{userLinkId}"
@using Lib
@using cSharpAuth.Services
@inject UserLinkService UserLinkService
@inject NavigationManager NavigationManager
<h1>@Title UserLink</h1>
<hr />
<EditForm OnValidSubmit="SaveUser" EditContext="@editContext">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Content" class="form-label">Title</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="link.Content" placeholder="My Website Link" />
        </div>
        <ValidationMessage For="@(() => link.Content)" />
    </div>
    <div class="mb-3">
        <label for="Href" class="form-label">Website Link</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="link.WebsiteLink" placeholder="https://www.leenet.link" />
        </div>
        <ValidationMessage For="@(() => link.WebsiteLink)" />
    </div>
    <div class="mb-3">
        <label for="ImgHref" class="form-label">Website Image Link</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="link.WebsiteImgLink" placeholder="https://www.leenet.link" />
        </div>
        <ValidationMessage For="@(() => link.WebsiteImgLink)" />
    </div>
    <div class="mb-3">
        <label for="Target" class="form-label">Target</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="link.Target" placeholder="_blank" />
        </div>
        <ValidationMessage For="@(() => link.Target)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <a class="btn btn-light" @onclick="Cancel">Cancel</a>
    </div>
</EditForm>
@code {
    [Parameter]
    public string userLinkId { get; set; }
    private EditContext editContext;
    protected string Title = "Add";
    protected UserLinkOverride link = new();
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(userLinkId))
        {
            Title = "Edit";
            var _link = await UserLinkService.Get(userLinkId);
            link.__T = _link.__T;
            link.Content = _link.Content;
            link.Href = _link.Href;
            link.Pid = _link.Pid;
            link.Target = _link.Target;
        }
    }
    protected override void OnInitialized()
    {
        editContext = new EditContext(link);
    }
    protected async Task SaveUser()
    {
        if (!editContext.Validate())
            return;
        if (link.Pid != Guid.Empty)
        {
            await UserLinkService.Put(link);
        }
        else
        {
            await UserLinkService.Post(link);
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}